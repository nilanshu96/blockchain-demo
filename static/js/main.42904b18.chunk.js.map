{"version":3,"sources":["util/blockchain-util.js","util/peer-management.js","components/block/Block.js","components/downward-arrow/DownwardArrow.js","components/blockchain/BlockChain.js","components/add-data-button/AddDataButton.js","components/avatar/Avatar.js","components/popup/PopUp.js","App.js","reportWebVitals.js","index.js"],"names":["verifyBlockChain","blocks","i","length","isValid","RECEIVE","UPDATE","UPDATE_FAILED","UPDATE_SUCCESSFUL","UPDATE_NOT_CALLED","masterPeer","getNewBlocks","map","block","key","uuidv4","Block","updateNextBlock","useState","data","setData","idx","setIdx","prevHash","setPrevHash","hash","setHash","nonce","setNonce","setIsValid","createdAt","setCreatedAt","lastHash","useRef","lastPrevHash","lastCreatedAt","isCurrent","updateBlock","useCallback","newBlock","console","log","useEffect","current","fetch","process","method","body","JSON","stringify","headers","then","resp","json","Object","assign","catch","hashColor","className","placeholder","value","onChange","event","target","memo","DownwardArrow","BlockChain","children","childrenCount","Children","count","forEach","child","push","AddDataButton","addNewBlock","submitButton","onKeyUp","keyCode","click","onClick","ref","Avatar","peer","changeCurrentPeer","focusedClass","focused","id","PopUp","modalIsOpen","setModalIsOpen","Modal","setAppElement","closeModal","isOpen","onRequestClose","style","content","top","left","right","bottom","marginRight","transform","display","flexDirection","contentLabel","App","setBlocks","peers","setPeers","currentPeer","setCurrentPeer","blockchain_box","newPeer","classList","remove","currentPeerObj","newPeerObj","channel","onmessage","eventData","parse","message","getBlocks","updatedBlocks","changePeers","currBlocks","prevIdx","peerObject1","peer1","RTCPeerConnection","channel1","createDataChannel","negotiated","send","peerObject2","updateStatus","peer2","channel2","loading","onopen","onicecandidate","candidate","addIceCandidate","readyState","createOffer","offer","setLocalDescription","setRemoteDescription","localDescription","createAnswer","answer","peersInit","peerObj","contains","add","updateRequest","currPeers","addPeer","String","currState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42904b18.chunk.js","sourcesContent":["export const verifyBlockChain = (blocks) => {\n  for (let i = 0; i < blocks.length; i++) {\n    if (!blocks[i].isValid) return false;\n  }\n  return true;\n};\n","import { verifyBlockChain } from \"./blockchain-util\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst RECEIVE = \"receive\";\nconst UPDATE = \"update\";\nconst UPDATE_FAILED = \"failed\";\nconst UPDATE_SUCCESSFUL = \"success\";\nconst UPDATE_NOT_CALLED = \"no update\";\n\nlet masterPeer = {};\n\nconst getNewBlocks = (blocks) => {\n  return blocks.map((block) => ({ ...block, key: uuidv4() }));\n};\n\nconst init = (blocks, setBlocks) => {\n  masterPeer.peers = [];\n  const peerObject1 = {};\n  masterPeer.blocks = blocks;\n  const peer1 = new RTCPeerConnection();\n  const channel1 = peer1.createDataChannel(\"blockchain\", {\n    negotiated: true,\n    id: 0,\n  });\n\n  peerObject1.peer = peer1;\n  peerObject1.channel = channel1;\n  masterPeer.peers.push(peerObject1);\n\n  channel1.onmessage = (event) => {\n    const eventData = JSON.parse(event.data);\n\n    if (eventData.message === RECEIVE) {\n      channel1.send(\n        JSON.stringify({ message: RECEIVE, blocks: masterPeer.blocks })\n      );\n    } else if (eventData.message === UPDATE) {\n      const updatedBlocks = eventData.blocks;\n      console.log(\"received updated blocks:\");\n      console.log(updatedBlocks);\n      if (verifyBlockChain(updatedBlocks)) {\n        masterPeer.blocks = updatedBlocks;\n        channel1.send(JSON.stringify({ message: UPDATE_SUCCESSFUL }));\n      } else {\n        channel1.send(JSON.stringify({ message: UPDATE_FAILED }));\n      }\n    }\n  };\n\n  const peerObject2 = {};\n  peerObject2.updateStatus = UPDATE_NOT_CALLED; //used later when blocks need to be updated\n  const peer2 = new RTCPeerConnection();\n  const channel2 = peer2.createDataChannel(\"blockchain\", {\n    negotiated: true,\n    id: 0,\n  });\n  channel2.onmessage = (event) => {\n    const eventData = JSON.parse(event.data);\n\n    if (eventData.message === RECEIVE) {\n      peerObject2.loading = false;\n      peerObject2.blocks = getNewBlocks(eventData.blocks);\n      setBlocks(peerObject2.blocks);\n    }\n  };\n\n  channel2.onopen = () => {\n    peerObject2.getBlocks();\n  };\n\n  peerObject2.peer = peer2;\n  peerObject2.channel = channel2;\n  peerObject2.loading = false;\n\n  peerObject2.getBlocks = () => {\n    peerObject2.loading = true;\n    console.log(\"in getblocks\");\n\n    channel2.send(JSON.stringify({ message: RECEIVE }));\n  };\n\n  peerObject2.updatedBlocks = () => {\n    channel2.send(\n      JSON.stringify({ message: UPDATE, blocks: peerObject2.blocks })\n    );\n  };\n\n  peerObject2.blocks = [];\n\n  peer1.onicecandidate = (event) => {\n    if (event.candidate) {\n      console.log(\"ice 1\");\n      peer2.addIceCandidate(event.candidate);\n    }\n  };\n\n  peer2.onicecandidate = (event) => {\n    if (event.candidate) {\n      console.log(\"ice 2\");\n      peer1.addIceCandidate(event.candidate);\n      console.log(channel2.readyState);\n    }\n  };\n\n  return peer1\n    .createOffer()\n    .then((offer) => peer1.setLocalDescription(offer))\n    .then(() => peer2.setRemoteDescription(peer1.localDescription))\n    .then(() => peer2.createAnswer())\n    .then((answer) => peer2.setLocalDescription(answer))\n    .then(() => peer1.setRemoteDescription(peer2.localDescription))\n    .then(() => {\n      return peerObject2;\n    })\n    .catch(console.log);\n};\n\nconst addPeer = (setPeers) => {\n  const peerObject1 = {};\n  const peer1 = new RTCPeerConnection();\n  const channel1 = peer1.createDataChannel(\"blockchain\", {\n    negotiated: true,\n    id: 0,\n  });\n\n  peerObject1.peer = peer1;\n  peerObject1.channel = channel1;\n  peerObject1.updateRequest = masterPeer.peers.push(peerObject1);\n\n  channel1.onmessage = (event) => {\n    const eventData = JSON.parse(event.data);\n\n    if (eventData.message === RECEIVE) {\n      console.log(\"sending blocks:\");\n      console.log(masterPeer.blocks);\n      channel1.send(\n        JSON.stringify({ message: RECEIVE, blocks: masterPeer.blocks })\n      );\n    } else if (eventData.message === UPDATE) {\n      const updatedBlocks = eventData.blocks;\n      if (verifyBlockChain(updatedBlocks)) {\n        masterPeer.blocks = updatedBlocks;\n        channel1.send(JSON.stringify({ message: UPDATE_SUCCESSFUL }));\n      } else {\n        channel1.send(JSON.stringify({ message: UPDATE_FAILED }));\n      }\n    }\n  };\n\n  const peerObject2 = {};\n  peerObject2.updateStatus = UPDATE_NOT_CALLED; //used later when blocks need to be updated\n  const peer2 = new RTCPeerConnection();\n  const channel2 = peer2.createDataChannel(\"blockchain\", {\n    negotiated: true,\n    id: 0,\n  });\n  channel2.onmessage = (event) => {\n    const eventData = JSON.parse(event.data);\n\n    if (eventData.message === RECEIVE) {\n      peerObject2.loading = false;\n      peerObject2.blocks = getNewBlocks(eventData.blocks);\n      console.log(\"peer added and working\");\n      setPeers((currPeers) => [...currPeers, peerObject2]);\n    }\n  };\n\n  channel2.onopen = () => {\n    peerObject2.getBlocks();\n  };\n\n  peerObject2.peer = peer2;\n  peerObject2.channel = channel2;\n  peerObject2.loading = false;\n\n  peerObject2.getBlocks = () => {\n    peerObject2.loading = true;\n    console.log(\"in getblocks\");\n\n    channel2.send(JSON.stringify({ message: RECEIVE }));\n  };\n\n  peerObject2.updatedBlocks = () => {\n    channel2.send(\n      JSON.stringify({ message: UPDATE, blocks: peerObject2.blocks })\n    );\n  };\n\n  peerObject2.blocks = [];\n\n  peer1.onicecandidate = (event) => {\n    if (event.candidate) {\n      console.log(\"ice 1\");\n      peer2.addIceCandidate(event.candidate);\n    }\n  };\n\n  peer2.onicecandidate = (event) => {\n    if (event.candidate) {\n      console.log(\"ice 2\");\n      peer1.addIceCandidate(event.candidate);\n      console.log(channel2.readyState);\n    }\n  };\n\n  return peer1\n    .createOffer()\n    .then((offer) => peer1.setLocalDescription(offer))\n    .then(() => peer2.setRemoteDescription(peer1.localDescription))\n    .then(() => peer2.createAnswer())\n    .then((answer) => peer2.setLocalDescription(answer))\n    .then(() => peer1.setRemoteDescription(peer2.localDescription))\n    .then(() => {\n      return peerObject2;\n    })\n    .catch(console.log);\n};\n\nconst changePeers = (\n  currentPeerObj,\n  newPeerObj,\n  setCurrentPeer,\n  setBlocks,\n  setModalIsOpen,\n  blocks\n) => {\n  currentPeerObj.blocks = blocks;\n  //currentPeerObject should teel the newPeerObj that updating has been successful. Here since it's in a single page, we aren't establishing\n  //another peer connection between currentPeerObj and newPeerObj. Establishing another peer connection would be required for a real blockchain\n  currentPeerObj.channel.onmessage = (event) => {\n    const eventData = JSON.parse(event.data);\n    if (eventData.message === UPDATE_SUCCESSFUL) {\n      newPeerObj.getBlocks();\n    } else if (eventData.message === UPDATE_FAILED) {\n      setBlocks(newPeerObj.blocks);\n      console.log(\"failed update\");\n      console.log(newPeerObj.blocks);\n      setCurrentPeer(newPeerObj);\n      setModalIsOpen(true);\n    }\n  };\n\n  newPeerObj.channel.onmessage = (event) => {\n    const eventData = JSON.parse(event.data);\n\n    if (eventData.message === RECEIVE) {\n      console.log(\"blocks received\");\n      newPeerObj.blocks = getNewBlocks(eventData.blocks);\n      console.log(newPeerObj.blocks);\n      setBlocks(newPeerObj.blocks);\n      setCurrentPeer(newPeerObj);\n    }\n  };\n\n  currentPeerObj.updatedBlocks();\n};\n\nexport { init as peersInit, addPeer, changePeers };\n","import \"./Block.css\";\n\nimport { useState, useCallback, useEffect, memo, useRef } from \"react\";\n\nconst Block = ({ block, updateNextBlock }) => {\n  const [data, setData] = useState(block.data);\n  const [idx, setIdx] = useState(block.idx);\n  const [prevHash, setPrevHash] = useState(block.prevHash);\n  const [hash, setHash] = useState(block.hash);\n  const [nonce, setNonce] = useState(block.nonce);\n  const [isValid, setIsValid] = useState(block.isValid);\n  const [createdAt, setCreatedAt] = useState(block.createdAt);\n\n  const lastHash = useRef(hash);\n  const lastPrevHash = useRef(prevHash);\n  const lastCreatedAt = useRef(createdAt);\n\n  const isCurrent = useRef(true);\n\n  const updateBlock = useCallback(\n    (newBlock) => {\n      console.log(\"updateBlock called\");\n\n      setIdx(newBlock.idx);\n      setPrevHash(newBlock.prevHash);\n      setHash(newBlock.hash);\n      setNonce(newBlock.nonce);\n      setIsValid(newBlock.isValid);\n      setCreatedAt(newBlock.createdAt);\n      updateNextBlock(newBlock.idx);\n    },\n    [updateNextBlock]\n  );\n\n  const onDataChange = (event) => {\n    setData(event.target.value);\n  };\n\n  useEffect(() => {\n    return () => {\n      //to prevent memory leaks\n      isCurrent.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_URI}/generateblock`, {\n      method: \"post\",\n      body: JSON.stringify({ ...block, data: data }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((resp) => resp.json())\n      .then((newBlock) => {\n        //mutating the block which comes from the App's blocks array as using setBlocks from App.js will cause a re-render.\n        //All the blocks will later get updated by the updateNextBlock call\n        if (isCurrent.current) {\n          if (\n            newBlock.prevHash === lastPrevHash.current &&\n            newBlock.hash === lastHash.current\n          ) {\n            console.log(\"lastCreatedAt: \" + lastCreatedAt.current);\n            console.log(\"current createdAT: \" + newBlock.createdAt);\n            newBlock.createdAt = lastCreatedAt.current;\n          } else {\n            lastPrevHash.current = newBlock.prevHash;\n            lastHash.current = newBlock.hash;\n            lastCreatedAt.current = newBlock.createdAt;\n          }\n          Object.assign(block, newBlock);\n          updateBlock(newBlock);\n        }\n      })\n      .catch(console.log);\n  }, [data, block, updateBlock]);\n\n  let hashColor = \"fc-g\";\n  if (!isValid) hashColor = \"fc-r\";\n\n  return (\n    <div className=\"box-1 box-hover br-2 padding-5 block-width mv-5\">\n      <div className=\"box-1-gray flex\">\n        <div className=\"br-1-gray ta-center pa-v-2 pa-h-5 inline-block bg-lg\">\n          DATA\n        </div>\n        <input\n          placeholder=\"Enter Data\"\n          className=\"fg-4 pa-h-4\"\n          value={data}\n          onChange={onDataChange}\n        ></input>\n      </div>\n      <div className=\"flex pa-t-5 pa-b-2 fs-s-8\">\n        <div className=\"pa-r-4 no-text-wrap\">PREVIOUS HASH</div>\n        <div className={hashColor + \" hash-box\"}>{prevHash}</div>\n      </div>\n      <div className=\"flex  pa-b-5 pa-t-2 fs-s-8\">\n        <div className=\"pa-r-4\">HASH</div>\n        <div className={hashColor + \" hash-box\"}>{hash}</div>\n      </div>\n      <div className=\"flex fs-l-5 pa-v-2 flex-baseline\">\n        <div className=\"mr-2\">\n          {idx === 0 ? \"GENESIS BLOCK\" : \"BLOCK #\" + idx}{\" \"}\n        </div>\n        <div className=\"fs-s-8\"> {createdAt}</div>\n        <div className=\"ml-a\">{nonce}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Block);\n","const DownwardArrow = () => {\n  return <div className=\"fs-xl-5\">⇩</div>;\n};\n\nexport default DownwardArrow;\n","import { Children } from \"react\";\n\nimport DownwardArrow from \"../downward-arrow/DownwardArrow\";\n\nconst BlockChain = ({ children }) => {\n  const childrenCount = Children.count(children);\n\n  let blocks = \"\";\n\n  if (childrenCount > 0) {\n    blocks = [];\n    Children.forEach(children, (child, i) => {\n      blocks.push(child);\n      if (i < childrenCount - 1) {\n        blocks.push(<DownwardArrow key={i} />);\n      }\n    });\n  }\n\n  return (\n    <div className=\"flex flex-column fit-content flex-align-center\">\n      {blocks}\n    </div>\n  );\n};\n\nexport default BlockChain;\n","import { useState, useRef } from \"react\";\n\nconst AddDataButton = ({ addNewBlock }) => {\n  const [data, setData] = useState(\"\");\n\n  const onDataChange = (event) => setData(event.target.value);\n\n  const submitButton = useRef();\n\n  const onPressEnter = (event) => {\n    if (event.keyCode === 13) {\n      submitButton.current.click();\n    }\n  };\n\n  const onSubmitClick = () => {\n    setData(\"\");\n    addNewBlock(data);\n  };\n\n  return (\n    <div className=\"box-1 box-hover br-2 padding-5 flex flex-column w-fit-content mv-5\">\n      <div className=\"box-1-gray flex\">\n        <div className=\"br-1-gray ta-center pa-v-2 pa-h-5 inline-block bg-lg\">\n          DATA\n        </div>\n        <input\n          placeholder=\"Enter Data\"\n          className=\"fg-4 pa-h-4\"\n          onChange={onDataChange}\n          value={data}\n          onKeyUp={onPressEnter}\n        ></input>\n      </div>\n      <button\n        className=\"padding-2 mt-5 w-fit-content center pa-h-5\"\n        onClick={onSubmitClick}\n        ref={submitButton}\n      >\n        ADD DATA\n      </button>\n    </div>\n  );\n};\n\nexport default AddDataButton;\n","import \"./Avatar.css\";\n\nconst Avatar = ({ peer, changeCurrentPeer, focused }) => {\n  let focusedClass = \"\";\n  if (focused) {\n    focusedClass = \" focused\";\n  }\n\n  return (\n    <div\n      id=\"avatar\"\n      className={\"mh-5 min-width-fc flex-shrink-0\" + focusedClass}\n      onClick={() => changeCurrentPeer(peer)}\n    ></div>\n  );\n};\n\nexport default Avatar;\n","import Modal from \"react-modal\";\n\nconst PopUp = ({ modalIsOpen, setModalIsOpen }) => {\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n  };\n\n  Modal.setAppElement(\"#root\");\n\n  const closeModal = () => {\n    setModalIsOpen(false);\n  };\n\n  return (\n    <Modal\n      isOpen={modalIsOpen}\n      onRequestClose={closeModal}\n      style={customStyles}\n      contentLabel={\"failure popUp\"}\n    >\n      <p className=\"f-l fc-r ta-center\">\n        Failed to reconcile the blocks as the blockchain was illegal\n      </p>\n      <button className=\"center btn btn-bg-red padding-4\" onClick={closeModal}>\n        Close\n      </button>\n    </Modal>\n  );\n};\n\nexport default PopUp;\n","import \"./App.css\";\n\nimport { useState, useEffect, useCallback, useRef } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { peersInit, addPeer, changePeers } from \"./util/peer-management\";\n\nimport Block from \"./components/block/Block\";\nimport BlockChain from \"./components/blockchain/BlockChain\";\nimport AddDataButton from \"./components/add-data-button/AddDataButton\";\nimport Avatar from \"./components/avatar/Avatar\";\nimport PopUp from \"./components/popup/PopUp\";\n\nfunction App() {\n  const [blocks, setBlocks] = useState([]);\n  const [peers, setPeers] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [currentPeer, setCurrentPeer] = useState(null);\n  const blockchain_box = useRef();\n\n  const changeCurrentPeer = (newPeer) => {\n    if (currentPeer !== newPeer) {\n      blockchain_box.current.classList.remove(\"slide-in\");\n      changePeers(\n        currentPeer,\n        newPeer,\n        setCurrentPeer,\n        setBlocks,\n        setModalIsOpen,\n        blocks\n      );\n    }\n  };\n\n  const updateNextBlock = useCallback((id) => {\n    setBlocks((currBlocks) => {\n      if (id + 1 < currBlocks.length) {\n        currBlocks[id + 1].prevHash = currBlocks[id].hash;\n        currBlocks[id + 1].key = uuidv4();\n        const newBlocks = [...currBlocks];\n        return newBlocks;\n      }\n      return currBlocks;\n    });\n  }, []);\n\n  const addNewBlock = (data) => {\n    fetch(`${process.env.REACT_APP_API_URI}/generatevalidblock`, {\n      method: \"post\",\n      body: JSON.stringify({\n        data: String(data),\n        prevHash: blocks[blocks.length - 1].hash,\n        prevIdx: blocks.length - 1,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((resp) => resp.json())\n      .then((block) => {\n        block.key = uuidv4(); //a change in key triggers the update in the component to which it belongs\n        setBlocks((currState) => [...currState, block]);\n      })\n      .catch(console.log);\n  };\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_URI}/generatevalidblock`, {\n      method: \"post\",\n      body: JSON.stringify({\n        data: \"Welcome to SimpleChain!\",\n        prevHash: \"0\",\n        prevIdx: -1,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((resp) => resp.json())\n      .then((block) => {\n        block.key = uuidv4();\n        return peersInit([block], setBlocks);\n      })\n      .then((peerObj) => {\n        setPeers([peerObj]);\n        setCurrentPeer(peerObj);\n      })\n      .catch(console.log);\n  }, []);\n\n  if (!blocks || blocks.length === 0) {\n    return <div>Loading</div>;\n  }\n\n  if (\n    blockchain_box.current &&\n    !blockchain_box.current.classList.contains(\"slide-in\")\n  ) {\n    blockchain_box.current.classList.add(\"slide-in\");\n  }\n\n  return (\n    <div>\n      <h1 className=\"ta-center\">SIMPLE CHAIN</h1>\n      <h2 className=\"peer-text\">Peers</h2>\n      <div className=\"flex flex-align-center max-width-100p peer-box\">\n        <div className=\"flex overflow-auto overflow-visible\">\n          {peers.map((peer, id) => (\n            <Avatar\n              peer={peer}\n              key={id}\n              changeCurrentPeer={changeCurrentPeer}\n              focused={peer === currentPeer ? true : false}\n            />\n          ))}\n        </div>\n        <button\n          className=\"btn padding-4 ml-a h-fit-content dim\"\n          onClick={() => addPeer(setPeers)}\n        >\n          Add Peer\n        </button>\n      </div>\n      <PopUp modalIsOpen={modalIsOpen} setModalIsOpen={setModalIsOpen} />\n      <div\n        ref={blockchain_box}\n        className=\"flex flex-column flex-align-center mt-4 blockchain-box slide-in\"\n      >\n        <BlockChain>\n          {blocks.map((block) => {\n            return (\n              <Block\n                block={block}\n                key={block.key}\n                updateNextBlock={updateNextBlock}\n              />\n            );\n          })}\n        </BlockChain>\n        <AddDataButton addNewBlock={addNewBlock} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}